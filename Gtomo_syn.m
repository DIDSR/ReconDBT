
function Gt = Gtomo_syn(btg,ig);
%function Gt = Gtomo_syn(btg,ig);
%Generate the circular DBT forward projection operator. 
%
%Inputs:
%   btg: tomosynthesis geometry, generated by using "bt_geom()".
%   ig: object (image) geometry, generated by using "image_geom()" in the 
%       IRT package.
%
%outputs: 
%   Gt: a cell array containing the forward projectors for all projection
%   views, each Gt{i} is generated by using "Gcone()" in the IRT package.
%
% Author: Rongping Zeng, FDA/CDRH/OSEL/DIDSR, 
% Contact: rongping.zeng@fda.hhs.gov
% Feb. 2018

%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                       Legal Disclaimer
% This software and documentation (the "Software") were developed at the 
% Food and Drug Administration (FDA) by employees of the Federal Government 
% in the course of their official duties. Pursuant to Title 17, Section 105
% of the United States Code, this work is not subject to copyright protection
% and is in the public domain. Permission is hereby granted, free of charge, 
% to any person obtaining a copy of the Software, to deal in the Software 
% without restriction, including without limitation the rights to use, copy, 
% modify, merge, publish, distribute, sublicense, or sell copies of the 
% Software or derivatives, and to permit persons to whom the Software is 
% furnished to do so. FDA assumes no responsibility whatsoever for use by 
% other parties of the Software, its source code, documentation or compiled 
% executables, and makes no guarantees, expressed or implied, about its 
% quality, reliability, or any other characteristic. Further, use of this 
% code in no way implies endorsement by the FDA or confers any advantage in 
% regulatory decisions. Although this software can be redistributed and/or 
% modified freely, we ask that any derivative works bear some notice that 
% they are derived from it, and any modified versions bear some notice that 
% they have been modified.
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

R=btg.dso;
L=btg.dod;
theta=btg.ad;
nview=btg.na;

Gt=cell(1,nview);
for i=1:nview
    %the corresponding object geometry
    xoffset_vi(i) = ig.offset_x - R*sin(theta(i)*pi/180)/ig.dx;
    ig_vi = image_geom('nx', ig.nx, 'ny', ig.nz, 'nz', ig.ny, 'dx', ig.dx, 'dy',ig.dz, 'dz', ig.dy,...%defautly dy=-dx
         'offset_x',xoffset_vi(i), 'offset_y',ig.offset_z, 'offset_z',ig.offset_y,'mask', permute(ig.mask,[1 3 2]), 'down', 1);

    %the corresponding CT geometry
    na=1;
    orbit_start=theta(i);
    dso(i)=R*cos(theta(i)*pi/180);
    dod=L;
    soffset_vi(i) = btg.offset_s - R*sin(theta(i)*pi/180)/btg.ds;
   
    cg_vi = ct_geom('fan', 'ns', btg.ns, 'nt', btg.nt, 'na', na, ...
        'ds', btg.ds, ...%'dt', dv, ... defautly dt = -ds;
        'dt',btg.dt,...
        'down', 1, ...
     ...%   'orbit', orbit,...
        'orbit_start',0,...
        'offset_s', soffset_vi(i), ... % quarter detector
        'offset_t', btg.offset_t, ...
        'dso', dso(i), 'dod', dod, ...
        'dfs',inf); %flat detector

   Gt{i}=Gcone(cg_vi,ig_vi,'nthread',1);
end
   
